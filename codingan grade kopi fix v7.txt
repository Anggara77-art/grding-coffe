pkg load image;

% Fungsi utama untuk memproses banyak gambar
function clustering_gambar_multi()
    % Rentang gambar yang akan diproses (dari 41 hingga 50)
    for i = 41:50
        % Path gambar
        gambar_path = sprintf('C:/Users/Windows/Documents/tugas akhir/octave-9.2.0-w64/%04d.JPG', i);

        % Periksa apakah file ada
        if ~exist(gambar_path, 'file')
            fprintf('Gambar %s tidak ditemukan. Lewati...\n', gambar_path);
            continue;
        end

        % Debug: Memproses gambar
        fprintf('Memproses gambar: %s\n', gambar_path);
        clustering_gambar(gambar_path);
    end
end

% Fungsi untuk memproses setiap gambar
function clustering_gambar(gambar_path)
    % Baca gambar
    img = imread(gambar_path);

    % Tampilkan gambar asli
    figure;
    subplot(1, 2, 1);
    imshow(img);
    title('Gambar Asli');

    % Pre-processing
    gray_img = rgb2gray(img);
    h = fspecial('gaussian', [5, 5], 2);
    gray_img_filtered = imfilter(gray_img, h);
    gray_img_adjusted = imadjust(gray_img_filtered);
    threshold_value = 100;
    gray_img_thresholded = gray_img_adjusted > threshold_value;

    % Membuat kernel disk secara manual (3x3 disk)
    disk_kernel = [0 1 0; 1 1 1; 0 1 0]; % Kernel 3x3 untuk erosi
    gray_img_morph = imerode(gray_img_thresholded, disk_kernel);

    % Tampilkan hasil pre-processing
    subplot(1, 2, 2);
    imshow(gray_img_morph);
    title('Hasil Pre-processing');

    % Hitung fitur GLCM
    offset = [0 1];
    glcm = compute_glcm(gray_img_morph, offset);
    stats = compute_glcm_props(glcm);

    % Hitung rata-rata RGB
    mean_r = mean(mean(img(:, :, 1)));
    mean_g = mean(mean(img(:, :, 2)));
    mean_b = mean(mean(img(:, :, 3)));

    % Tampilkan hasil fitur GLCM untuk debugging
    fprintf('Fitur GLCM untuk %s:\n', gambar_path);
    fprintf('  Contrast = %.4f\n', stats.Contrast);
    fprintf('  Energy = %.4f\n', stats.Energy);
    fprintf('  Homogeneity = %.4f\n', stats.Homogeneity);
    fprintf('  Entropy = %.4f\n', stats.Entropy);

    % Tentukan grade berdasarkan fitur GLCM dan RGB
    if mean_r > 200 && mean_g > 200 && mean_b > 200 && stats.Contrast < 5 && stats.Energy > 0.8
        grade = 'A';  % Grade A untuk RGB lebih dari 200 dan GLCM memiliki Contrast rendah dan Energy tinggi
    elseif mean_r > 150 && mean_g > 150 && mean_b > 150 && stats.Contrast < 10 && stats.Energy > 0.6
        grade = 'B';  % Grade B untuk RGB antara 150 dan 200, Contrast rendah dan Energy cukup tinggi
    elseif mean_r > 120 && mean_g > 120 && mean_b > 120 && stats.Contrast < 15 && stats.Energy > 0.4
        grade = 'C';  % Grade C untuk RGB antara 120 dan 150, Contrast sedang, Energy cukup tinggi
    elseif mean_r > 90 && mean_g > 90 && mean_b > 90 && stats.Contrast < 20 && stats.Energy > 0.2
        grade = 'D';  % Grade D untuk RGB antara 90 dan 120, Contrast lebih tinggi, Energy rendah
    else
        grade = 'E';  % Grade E untuk RGB di bawah 90 dan Contrast tinggi
    end

    % Tampilkan hasil di Command Window
    fprintf('Hasil untuk %s:\n', gambar_path);
    fprintf('  RGB: R = %.2f, G = %.2f, B = %.2f\n', mean_r, mean_g, mean_b);
    fprintf('  Grade: %s\n\n', grade);
end

% Fungsi untuk menghitung GLCM
function glcm = compute_glcm(img_gray, offset)
    [rows, cols] = size(img_gray);
    glcm = zeros(256, 256);

    for i = 1:rows
        for j = 1:cols
            if j + offset(2) <= cols && j + offset(2) > 0 && ...
               i + offset(1) <= rows && i + offset(1) > 0
                pixel_value = img_gray(i, j);
                neighbor_value = img_gray(i + offset(1), j + offset(2));
                glcm(pixel_value + 1, neighbor_value + 1) += 1;
            end
        end
    end
    glcm = glcm / sum(glcm(:));
end

% Fungsi untuk menghitung properti GLCM
function stats = compute_glcm_props(glcm)
    stats.Contrast = 0;
    stats.Energy = sum(glcm(:).^2);
    stats.Homogeneity = 0;
    stats.Entropy = 0;

    [rows, cols] = size(glcm);
    [x, y] = meshgrid(0:rows-1, 0:cols-1);

    stats.Contrast = sum(sum((x - y).^2 .* glcm));
    stats.Homogeneity = sum(sum(glcm ./ (1 + abs(x - y))));  % Homogeneity formula
    stats.Entropy = -sum(sum(glcm .* log(glcm + eps)));  % Avoid log(0)
end

% Jalankan fungsi untuk semua gambar
clustering_gambar_multi();
